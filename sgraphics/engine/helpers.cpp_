#include "helpers.hpp"
#include "Engine.hpp"

#define GLEW_STATIC
#include <GL/glew.h>
#include <SDL2/SDL_image.h>

#define SDL_MAIN_HANDLED
#include <SDL2/SDL.h>

namespace sg
{
    namespace engine
    {
        bool mousePressed()
        {
            const auto &event = Engine::instance().GetEvent();
            if (!event)
                return false;

            switch (event->type)
            {

            case SDL_MOUSEBUTTONDOWN:
            {
                switch (event->button.button)
                {
                case SDL_BUTTON_LEFT:
                    return true;
                    break;
                default:
                    break;
                }
            }

            case SDL_MOUSEMOTION:
            {
                switch (event->button.button)
                {
                case SDL_BUTTON_LEFT:
                    return true;
                    break;
                default:
                    break;
                }

            default:
                break;
            }
            }

            return false;
        }

        bool A_DOWN()
        {
            const auto &event = Engine::instance().GetEvent();
            if (!event)
                return false;

            switch (event->type)
            {
            case SDL_KEYDOWN:

                switch (event->key.keysym.sym)
                {
                case SDLK_a:
                    return true;
                    break;
                default:
                    break;
                }

                break;
            default:
                break;
            }

            return false;
        }

        bool D_DOWN()
        {
            const auto &event = Engine::instance().GetEvent();
            if (!event)
                return false;

            switch (event->type)
            {
            case SDL_KEYDOWN:

                switch (event->key.keysym.sym)
                {
                case SDLK_d:
                    return true;
                    break;
                default:
                    break;
                }

                break;
            default:
                break;
            }

            return false;
        }

        bool S_DOWN()
        {
            const auto &event = Engine::instance().GetEvent();
            if (!event)
                return false;

            switch (event->type)
            {
            case SDL_KEYDOWN:

                switch (event->key.keysym.sym)
                {
                case SDLK_s:
                    return true;
                    break;
                default:
                    break;
                }

                break;
            default:
                break;
            }

            return false;
        }

        bool W_DOWN()
        {
            const auto &event = Engine::instance().GetEvent();
            if (!event)
                return false;

            switch (event->type)
            {
            case SDL_KEYDOWN:

                switch (event->key.keysym.sym)
                {
                case SDLK_w:
                    return true;
                    break;
                default:
                    break;
                }

                break;
            default:
                break;
            }

            return false;
        }

        bool A_UP()
        {

            const auto &event = Engine::instance().GetEvent();
            if (!event)
                return false;

            switch (event->type)
            {
            case SDL_KEYUP:

                switch (event->key.keysym.sym)
                {
                case SDLK_a:
                    return true;
                    break;
                default:
                    break;
                }

                break;
            default:
                break;
            }

            return false;
        }

        bool D_UP()
        {
            const auto &event = Engine::instance().GetEvent();
            if (!event)
                return false;

            switch (event->type)
            {
            case SDL_KEYUP:
                switch (event->key.keysym.sym)
                {
                case SDLK_d:
                    return true;
                    break;
                default:
                    break;
                }

                break;
            default:
                break;
            }

            return false;
        }

        bool S_UP()
        {
            const auto &event = Engine::instance().GetEvent();
            if (!event)
                return false;

            switch (event->type)
            {
            case SDL_KEYUP:

                switch (event->key.keysym.sym)
                {
                case SDLK_s:
                    return true;
                    break;
                default:
                    break;
                }

                break;
            default:
                break;
            }

            return false;
        }

        bool W_UP()
        {

            const auto &event = Engine::instance().GetEvent();
            if (!event)
                return false;

            switch (event->type)
            {
            case SDL_KEYUP:

                switch (event->key.keysym.sym)
                {
                case SDLK_w:
                    return true;
                    break;
                default:
                    break;
                }

                break;
            default:
                break;
            }

            return false;
        }
    }
}
